<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MPlayerX | No More Than Nothing]]></title>
  <link href="http://blog.mplayerx.org/blog/categories/mplayerx/atom.xml" rel="self"/>
  <link href="http://blog.mplayerx.org/"/>
  <updated>2015-04-16T11:52:05+09:00</updated>
  <id>http://blog.mplayerx.org/</id>
  <author>
    <name><![CDATA[Zongyao Qu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some Progress on MPlayerX]]></title>
    <link href="http://blog.mplayerx.org/blog/2015/04/16/some-progress-on-mplayerx/"/>
    <updated>2015-04-16T10:53:00+09:00</updated>
    <id>http://blog.mplayerx.org/blog/2015/04/16/some-progress-on-mplayerx</id>
    <content type="html"><![CDATA[<p>Last year was a tremendous year for me, my first kid was given birth ( actually I'd rather say MPX is my first child :)), work made me busier and busier, I was never happier and busier than before.</p>

<p>Taking a look back, the only down thing is that I didn't have much time on making much progress on my "first child" as before, even I didn't have much time to enjoy my best favorite movies. The only one I didn't miss is <a href="http://www.imdb.com/title/tt0816692">Interstellar</a>, which gave me 3 hours peace and enjoyment in mind.</p>

<p>I was hesitating once, as seeing more and more people are now spending more and more time on their iPhones and Androids, I wondered how much it is still meaningful to make progress on the desktop application. Until one day, I captured my kid by HandyCam, edited it and played it on TV, and the other day, I waited for minutes to see the video in youtube, and another day, I found I need to analyze a video frame by frame... I found mobile phone is still not that powerful and versatile to accomplish such tasks. I knew I need to continue my efforts on MPlayerX to keep the wonderful user experience that my iPhone could not.</p>

<p>Now I have made 50+ patches, make MPlayerX more adoptable to Yosemite, fix several bugs, upgrading the new core to support https and latest protocol of youtube. Hope I could release it before 10.11 is coming.</p>

<p>The other thing is that, MPlayerX will start to utilize the installer to fulfil monetization. I knew it may bring many negative comments, but honestly it is the best way to keep the developer motivated. For anyone who cares about this, please check the installer and make sure only install MPX, then it should be no difference with the old way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to turn off Hardware Accelerated Decoder]]></title>
    <link href="http://blog.mplayerx.org/blog/2014/01/15/how-to-turn-off-hardware-accelerated-decoder/"/>
    <updated>2014-01-15T11:16:00+09:00</updated>
    <id>http://blog.mplayerx.org/blog/2014/01/15/how-to-turn-off-hardware-accelerated-decoder</id>
    <content type="html"><![CDATA[<p>MPlayerX supports to decode the video with Hardware Accelerated Decoder (HAD). This feature uses your modern GPU to decode video frame, so that free your CPU for other tasks, and decrease the power consumption in the meantime, hopefully.</p>

<p>Currently, there is no easy way to turn on/off the HAD. And ideally, this feature should be transparent to users, and HAD should be always turned on.</p>

<p>However, the development on HAD is still in the preliminary stage, sometimes HAD may fail to decode the frame and even cause MPlayerX's core crash.</p>

<p>If you found MPlayerX failed to play some H264, MP4, MPEG2, AVC contents, please try the following instructions to turn off HAD.</p>

<!-- more -->


<h4>in Preference → Advanced → Extra options, copy&amp;paste the following string</h4>

<p><code>
-vc -ffh264vda,
</code></p>

<p>PLEASE DO NOT FORGET THE COMMA!</p>

<p>As you could tell in the snapshot,</p>

<p><img src="/images/turn-off-had.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's getting easier to open videos online]]></title>
    <link href="http://blog.mplayerx.org/blog/2013/12/26/its-getting-easier-to-open-online-videos/"/>
    <updated>2013-12-26T16:51:00+09:00</updated>
    <id>http://blog.mplayerx.org/blog/2013/12/26/its-getting-easier-to-open-online-videos</id>
    <content type="html"><![CDATA[<p>In previous versions, MPlayerX could play the videos in <a href="http://www.youtube.com">Youtube.com</a> directly.</p>

<p>However, you have to copy the URL → open MPlayerX → open URL panel → paste the URL, kind of annoying and even stop myself using this feature.</p>

<p>From 1.0.21, MPlayerX simplifies the usage much more, furthermore, <a href="http://vimeo.com">vimeo</a>, <a href="http://youku.com">youku</a>, <a href="http://instagram.com">Instagram</a> are getting supported.</p>

<p>Here is how to:</p>

<!-- more -->


<h3>1. Drag the link directly</h3>

<p><img src="/images/MPlayerX-Open-URL/001.jpg" width="800" height="500" title="1" ></p>

<p><img src="/images/MPlayerX-Open-URL/002.jpg" width="800" height="500" title="1" ></p>

<p><img src="/images/MPlayerX-Open-URL/003.jpg" width="800" height="500" title="1" ></p>

<h3>2. Open the URL in Services menu</h3>

<p><img src="/images/MPlayerX-Open-URL/004.jpg" width="800" height="500" title="1" ></p>

<h3>In case you don't see "MPlayerX: Open URL" in the contextual menu, please go to System Preference to enable it.</h3>

<p><img src="/images/MPlayerX-Open-URL/005.jpg" width="800" height="500" title="1" ></p>

<p>Note: if there is no entry in System Preference, you could log off and on once. Sometimes OS needs to re-login to find the necessary info from application's package.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use version number with Xcode and git]]></title>
    <link href="http://blog.mplayerx.org/blog/2013/05/10/use-version-number-with-xcode-and-git/"/>
    <updated>2013-05-10T13:25:00+09:00</updated>
    <id>http://blog.mplayerx.org/blog/2013/05/10/use-version-number-with-xcode-and-git</id>
    <content type="html"><![CDATA[<p>As a <a href="http://sparkle.andymatuschak.org">Sparkled</a> application, MPlayerX needs an automatic count-up mechanism between versions.</p>

<h3>1. Count up git versions</h3>

<p>  Git doesn't provide version number, it only gives out checksum of the commits, so let's make one.</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>version.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git rev-list HEAD | sort &gt; config.git-hash
</span><span class='line'><span class="nv">LOCALVER</span><span class="o">=</span>&lt;code&gt;wc -l config.git-hash | awk <span class="s1">&#39;{print $1}&#39;</span>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[</span> <span class="nv">$LOCALVER</span> &gt; 1 <span class="o">]</span> ; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;VER<span class="o">=</span><span class="sb">`</span>git rev-list origin/master | sort | join config.git-hash - | wc -l | awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$VER</span> !<span class="o">=</span> <span class="nv">$LOCALVER</span> <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nv">VER</span><span class="o">=</span><span class="nv">$LOCALVER</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c">## 0 is initial number</span>
</span><span class='line'><span class="nv">VER</span><span class="o">=</span><span class="sb">`</span>expr <span class="k">${</span><span class="nv">VER</span><span class="k">}</span> + 0<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$VER</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;else&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;VER<span class="o">=</span><span class="s2">&quot;unknown&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi
</span><span class='line'>rm -f config.git-hash
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  You could download this piece of script <a href="https://raw.github.com/niltsh/MPlayerX/sparkle/MPlayerX/version.sh">here</a>.</p>

<p>  Please note that this script always count up commits in the remote branch <strong>origin/master</strong> and local, so change the <strong>8th</strong> line if you want to work in other branches.</p>

<p>  You could set an initial number if necessary, in the <strong>15th</strong> line.</p>

<h3>2. Modify the info.plist by the version number</h3>

<p>  At first I implemented by some dirty string matching scripts, it works but ugly. Then I found <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ScriptingBridgeConcepts/Introduction/Introduction.html">ScriptingBridge</a>, thanks to it I could access the plist by ruby as I do by ObjC, this is much easier.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>updateInfoPlist.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;osx/cocoa&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">OSX</span>
</span><span class='line'><span class="no">OSX</span><span class="o">.</span><span class="n">require_framework</span> <span class="s1">&#39;ScriptingBridge&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;info = NSMutableDictionary.alloc.initWithContentsOfFile_(ARGV[0])&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">info</span> <span class="o">!=</span> <span class="kp">nil</span> <span class="k">then</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;## could read the plist file</span>
</span><span class='line'><span class="sr">currentVersion = %x[bash version.sh]</span>
</span><span class='line'>
</span><span class='line'><span class="sr">if currentVersion == &quot;unknown&quot; then</span>
</span><span class='line'><span class="sr">    puts &quot;version is invalid!&quot;</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">    puts &quot;version is valid:&quot; + currentVersion</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    currentVersion = currentVersion.chomp</span>
</span><span class='line'><span class="sr">    info.setValue_forKey_(currentVersion, &quot;CFBundleVersion&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    ## also grab the commit checksum</span>
</span><span class='line'><span class="sr">    commitHash = %x[git rev-list --max-count=1 HEAD]</span>
</span><span class='line'><span class="sr">    commitHash = commitHash.chomp</span>
</span><span class='line'><span class="sr">    info.setValue_forKey_(commitHash, &quot;CommitHash&quot;)</span>
</span><span class='line'><span class="sr">    info.writeToFile_atomically_(ARGV[0], 0)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  This piece of script could be downloaded <a href="https://raw.github.com/niltsh/MPlayerX/sparkle/MPlayerX/updateInfoPlist.rb">here</a>.</p>

<h3>3. Automate it</h3>

<p>0. Put the two script files above into your project folder, and then open your project.</p>

<p>1. Add a new <em>Aggregate Target</em>, let's say <strong>Update version in info.plist</strong>.</p>

<p>2. Inside of this target, add a <em>Run Script</em> build phase.</p>

<p>3. Add the following code into the shell area.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;shell script goes here&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;export <span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PATH</span><span class="k">}</span>:/usr/local/bin:/usr/local/git/bin:/sw/bin&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ruby updateInfoPlist.rb Info.plist
</span><span class='line'>touch -amfc Info.plist&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;exit 0
</span></code></pre></td></tr></table></div></figure></notextile></div>
4. Then go back to your application target, <em>add the dependency</em>.</p>

<p><img src="/images/use-version-number-with-xcode-and-git-1.png" width="1000" height="800" title="0-1-2-3" >
<img src="/images/use-version-number-with-xcode-and-git-2.png" width="800" height="150" title="4" ></p>

<h3>Notice</h3>

<p>   Remember to deploy your application always in the same branch, otherwise the number could be messed up, since the script only count up commits in origin/master and you current local branch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mplayer的编译方法]]></title>
    <link href="http://blog.mplayerx.org/blog/2013/04/24/bian-yi-mplayer/"/>
    <updated>2013-04-24T12:47:00+09:00</updated>
    <id>http://blog.mplayerx.org/blog/2013/04/24/bian-yi-mplayer</id>
    <content type="html"><![CDATA[<p>网上类似的文章数不胜数，并且有想法自己搞这些开源玩意儿的同学想必水平也应该都在我之上，我本不该多此一举。不过记得当初为了编译出一个能够完全胜任MPlayerX的核心，我还是费了相当一些周折，这些周折如果在网上仔细调查也能得到答案，不过将它们总结到一起的文章，我还没有发现。所以我就做一个搬运工，把它们放到一起供有兴趣的同学翻阅。</p>

<p>我会尽力在我水平之内照顾到这篇文章的通用性，但请恕我精力有限，如果有什么出错的地方请和我联系。</p>

<!-- more -->


<p><em>多点代码，少点废话。</em></p>

<ul>
<li><h3>准备工具链</h3></li>
</ul>


<p>编译所需要的所有的工具，都可以通过安装<a href="https://itunes.apple.com/en/app/xcode/id497799835?mt=12">Xcode</a>得到。</p>

<ul>
<li><h3>编译依赖库</h3>

<ol>
<li><p>Fontconfig</p>

<ul>
<li>功能：用于 支持MKV格式的内嵌字体。</li>
<li>地址：<a href="http://www.freedesktop.org/software/fontconfig/release/">http://www.freedesktop.org/software/fontconfig/release/</a></li>
<li>编译方法：

<pre><code>  tar xvf fontconfig-2.10.92.tar.bz2
  cd fontconfig-2.10.92
  ./configure
  make
  sudo make install
</code></pre></li>
</ul>
</li>
<li><p>freetype2</p>

<ul>
<li>功能：用于 字幕和OSD的文字显示。</li>
<li>地址：<a href="http://sourceforge.net/projects/freetype/files/freetype2/">http://sourceforge.net/projects/freetype/files/freetype2/</a></li>
<li>编译方法：

<pre><code>  tar xvf freetype-2.4.11.tar.bz2
  cd freetype-2.4.11/
  ./configure
  make
  sudo make install
</code></pre></li>
</ul>
</li>
<li><p>yasm</p>

<ul>
<li>功能：用于编译 libvpx。</li>
<li>地址：<a href="http://yasm.tortall.net/Download.html">http://yasm.tortall.net/Download.html</a></li>
<li>编译方法：

<pre><code>  tar xvf yasm-1.2.0.tar.gz
  cd yasm-1.2.0
  ./configure
  make
  sudo make install
</code></pre></li>
</ul>
</li>
<li><p>libvpx</p>

<ul>
<li>功能：WebM解码模块。</li>
<li>地址：<a href="http://code.google.com/p/webm/downloads/list">http://code.google.com/p/webm/downloads/list</a></li>
<li>编译方法：

<pre><code>  tar xvf libvpx-1.1.0.tar.bz2
  cd libvpx-1.1.0/
  ./configure --enable-vp8 --enable-postproc --enable-multithread --enable-spatial-resampling --disable-examples --disable-codec-srcs --disable-install-srcs --disable-install-docs --disable-debug --target=x86_64-darwin10-gcc
  make
  sudo make install 
</code></pre></li>
</ul>
</li>
<li><p>live555</p>

<ul>
<li>功能：该模块可以让mplayer通过http协议传输rtsp协议的内容。</li>
<li>地址：<a href="http://www.live555.com/liveMedia/public/live555-latest.tar.gz">http://www.live555.com/liveMedia/public/live555-latest.tar.gz</a></li>
<li>编译方法：

<pre><code>  tar xvf live555-latest.tar.gz
  cd live
  ./genMakefiles macosx
  make
  sudo make install
</code></pre></li>
</ul>
</li>
<li><p>其他以及注意事项</p>

<ul>
<li>编译流程比较简单，解压 → configure → make → sudo make install，需要注意的是 ./configure的选项。</li>
<li>除了以上的以外，还有一些可选装的第三方库，如 <a href="http://sourceforge.net/projects/flac/files/flac-src/">FLAC</a>, <a href="http://xiph.org/downloads/">ogg</a>, <a href="http://xiph.org/downloads/">vorbis</a>, <a href="http://xiph.org/downloads/">speex</a> 等等，编译方法都比较类似，这里就不一一列举了。</li>
</ul>
</li>
</ol>
</li>
<li><h3>编译mplayer</h3>

<ol>
<li><p><strong>下载源代码</strong></p>

<ol>
<li>mplayer

<pre><code> git clone git://git.mplayerhq.hu/mplayer -b master mplayer
</code></pre></li>
<li>ffmpeg

<pre><code> git clone git://source.ffmpeg.org/ffmpeg.git -b master mplayer/ffmpeg
</code></pre></li>
<li>libdvdnav

<pre><code> git clone git://git.videolan.org/libdvdnav.git -b master libdvdnav
</code></pre></li>
<li>libdvdread

<pre><code> git clone git://git.videolan.org/libdvdread.git -b master libdvdread
</code></pre></li>
<li>制作 libdvdnav 和 libdvdread 的符号链接

<pre><code> ln -s mplayer/libdvdnav libdvdnav/src
 ln -s mplayer/libdvdread4 libdvdread/src
</code></pre></li>
</ol>
</li>
<li><p><strong>编译</strong></p>

<pre><code> cd mplayer
 export CC="clang"
 ./configure --codecsdir=codecs --disable-mencoder --disable-gui --disable-apple-remote  --disable-unrarexec  --disable-pnm --disable-tga --disable-md5sum --disable-quartz  --disable-openal --disable-jpeg --disable-png --disable-yuv4mpeg --disable-faac --disable-faad --disable-tv --disable-libdca --disable-liba52 --disable-libvorbis --disable-theora --disable-qtx --disable-gl --disable-matrixview --disable-x11 --disable-xv --enable-decoder=vda --extra-cflags="-mmacosx-version-min=10.6" --extra-ldflags="-mmacosx-version-min=10.6 -framework CoreFoundation -framework VideoDecodeAcceleration -framework QuartzCore" --enable-runtime-cpudetection
 make -j8
</code></pre>

 现在你已经可以使用刚刚生成的mplayer了，祝贺你。试试看

<pre><code> ./mplayer test.mp4
</code></pre></li>
<li><p><strong>重定向动态链接库文件路径</strong></p>

<p> 如果你只是自己用，那么以上的步骤就足够了，你可以离开这个网页。</p>

<p> 如果你将你做好的mplayer发给你的朋友，你会得到下面的错误。</p>

<pre><code> QZYMBP17:binaries NILTSH$ ./mplayer 
 dyld: Library not loaded: /usr/local/lib/libfreetype.6.dylib
   Referenced from: /Volumes/Work/MPX/src/MPlayerX/MPlayerX/binaries/./mplayer
   Reason: image not found
 Trace/BPT trap: 5
</code></pre>

<p> mplayer使用了动态链接库来使用它需要的第三方代码。因此如果我们试图在<strong>没有编译安装这些第三方库的Mac中</strong>运行mplayer的话，将会得到以上的错误。</p>

<ul>
<li><strong>那如何查看 某一个二进制文件会链接到哪些动态链接库呢？</strong>

<pre><code>  otool -L mplayer
</code></pre>

  这个命令会输出mplayer所连接到的所有的库，包括系统默认的，所以一般我们可以用下面的命令。

<pre><code>  otool -L mplayer | grep local
</code></pre>

  我们会得到如下的输出：

<pre><code>  /usr/local/lib/libfreetype.6.dylib (compatibility version 15.0.0, current version 15.0.0)
  /usr/local/lib/libfontconfig.1.dylib (compatibility version 6.0.0, current version 6.4.0)
  /usr/local/lib/libspeex.1.dylib (compatibility version 7.0.0, current version 7.0.0)
</code></pre></li>
</ul>


<p> 上面列出来的就是我们之前编译好的第三方库，因此我们不仅要将mplayer本身拷贝到对方的Mac，还要将上面列出的dylib拷贝到相应的位置(/usr/local/lib/)。</p>

<p> 这是一个可行的办法，但是我不推荐拷贝到/usr/local/lib，一是麻烦，二是他可能会带来文件污染。我推荐下面的方法:</p>

<ul>
<li><p><strong>我们可以重定向动态链接库的路径</strong></p>

<p>  Mac中有一款工具 install_name_tool 可以<strong>修改二进制文件中的动态链接库的路径</strong>，具体使用方法，例如如下：</p>

<pre><code>  install_name_tool -change /usr/local/lib/libfreetype.6.dylib @executable_path/lib/libfreetype.6.dylib mplayer
</code></pre>

  运行了上面的命令之后，当我们再次用 otool 查看 mplayer，会得到如下结果:

<pre><code>  QZYMBP17:binaries NILTSH$ otool -L mplayer
  ...
      @executable_path/lib/libfreetype.6.dylib (compatibility version 15.0.0, current version 15.0.0)
  ...
</code></pre>

<p>  /usr/local/lib/libfreetype.6.dylib 被修改成了 @executable_path/lib/libfreetype.6.dylib，这意味着 mplayer 将从自己所在文件夹下的lib文件夹中去寻找libfreetype.dylib，而并非/usr/local/lib/。</p></li>
</ul>


<p> 这样我们就可以将自己做好的二进制文件按照如下的文件夹结构打包发布:</p>

<pre><code> |-mplayer
 \-lib
   |-libfreetype.6.dylib
   |-libfontconfig.1.dylib
   \-libspeex.1.dylib
</code></pre>

<p> <strong>大功告成！</strong></p>

<p> 将上面的一系列修改写成脚本：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/sh&lt;/h1&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> <span class="nv">$# </span>-lt 1 <span class="o">]]</span>; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;echo <span class="s2">&quot;Usage: modify.sh FILE&quot;</span>
</span><span class='line'><span class="nb">exit </span>1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;otool -L <span class="nv">$1</span> | grep <span class="nb">local</span> | cut -d<span class="s1">&#39;(&#39;</span> -f1 | sed -e <span class="s1">&#39;s/&lt;sup&gt;[&lt;/sup&gt; \t]*//&#39;</span> | <span class="k">while </span><span class="nb">read </span>line
</span><span class='line'><span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;newline<span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="k">${</span><span class="nv">line</span><span class="k">}</span> | sed -e <span class="s1">&#39;s|/usr/local|@executable_path|&#39;</span><span class="sb">`</span>
</span><span class='line'>install_name_tool -change <span class="k">${</span><span class="nv">line</span><span class="k">}</span> <span class="k">${</span><span class="nv">newline</span><span class="k">}</span> <span class="nv">$1</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
